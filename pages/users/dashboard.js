import { useEffect, useState } from "react";
import Head from "next/head";

import UserButton from "@/components/user/Button";
import SearchBar from "@/components/user/SearchBar";
import DeleteModal from "@/components/user/DeleteModal";
import CreateModal from "@/components/user/CreateModal";
import UpdateModal from "@/components/user/UpdateModal";

import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

import { BsFillTrashFill } from "react-icons/bs";
import { AiFillEdit } from "react-icons/ai";
import { IconContext } from "react-icons";

export default function dashboard({ users }) {
  const [filteredUser, setFilteredUser] = useState();
  const [delState, setDelState] = useState(false);
  const [createState, setCreateState] = useState(false);
  const [updateState, setUpdateState] = useState(false);
  const [choosedID, setChoosedID] = useState();
  const triggerToast = (text) => {
    toast(text);
  };
  const triggerDelete = (id) => {
    chooseID(id);
    setDelState(!delState);
  };
  const triggerUpdate = (id) => {
    chooseID(id);
    setUpdateState(!updateState);
  };
  const triggerCreate = () => {
    console.log(createState);
    setCreateState(!createState);
  };
  const chooseID = (id) => {
    if (id !== null) {
      setChoosedID(id);
    }
  };
  useEffect(() => {
    setFilteredUser(users);
  }, []);
  return (
    <>
      <Head>
        <title>Synapsis Challenge</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="">
        <ToastContainer />
        <UserButton href="/" content="Show Landing Page" />
        {delState && (
          <DeleteModal
            triggerDelete={triggerDelete}
            triggerToast={triggerToast}
            choosedID={choosedID}
          />
        )}

        {updateState && (
          <UpdateModal
            triggerUpdate={triggerUpdate}
            triggerToast={triggerToast}
            choosedID={choosedID}
          ></UpdateModal>
        )}

        {createState && (
          <CreateModal
            triggerCreate={triggerCreate}
            triggerToast={triggerToast}
          />
        )}
        <div className="bg-gradient-to-b from-blue-900 to-green-800 min-h-screen pt-12 md:pt-24  pb-20 md:pb-12 px-[3%]">
          <SearchBar
            data={users}
            setFilteredData={setFilteredUser}
            triggerCreate={triggerCreate}
          />
          <div className="bg-white rounded-lg md:rounded-xl overflow-hidden px-2 py-4 md:py-6">
            <table className="w-full table-auto">
              <thead>
                <tr className="bg-white mt-40">
                  <th>ID</th>
                  <th className="text-left">Name</th>
                  <th className="hidden md:grid text-left">Email</th>
                  <th>Status</th>
                  <th></th>
                  <th></th>
                </tr>
              </thead>
              <tbody className="gap-4">
                {filteredUser?.map((l) => (
                  <tr className="text-sm">
                    <td className="text-center h-12 px-3 md:px-2">{l.id}</td>
                    <td>{l.name}</td>
                    <td className="hidden md:grid h-12 content-center">
                      {l.email}
                    </td>

                    <td
                      className={
                        `text-center ` +
                        (l.status == "active"
                          ? "text-green-600"
                          : "text-red-400")
                      }
                    >
                      {l.status}
                    </td>
                    <td>
                      <div className="grid justify-items-center">
                        <IconContext.Provider
                          value={{ color: "green", size: "20px" }}
                        >
                          <div
                            className="cursor-pointer w-fit"
                            onClick={() => triggerUpdate(l.id)}
                          >
                            <AiFillEdit />
                          </div>
                        </IconContext.Provider>
                      </div>
                    </td>
                    <td>
                      <IconContext.Provider
                        value={{ color: "red", size: "20px" }}
                      >
                        <div
                          className="cursor-pointer w-fit"
                          onClick={() => triggerDelete(l.id)}
                        >
                          <BsFillTrashFill />
                        </div>
                      </IconContext.Provider>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </>
  );
}

export const getStaticProps = async () => {
  const users = await fetch(`https://gorest.co.in/public/v2/users`).then(
    (res) => res.json()
  );
  return {
    props: {
      users,
    },
  };
};
